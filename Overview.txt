Overview of the Symphony user interface code
============================================

Start up the Symphony UI by running the StartSymphony.m script.

StartSymphony.m:
    adds Symphony folders to the MATLAB path
    calls addSymphonyFramework() to load the Symphony .NET framework
    creates the Symphony object to launch the GUI


Symphony.m:
    This is the main source file, everything is controlled from here.
    All persistant data (Symphony controller, protocol plugin, etc.) is stored as properties of the Symphony object.
    
    createSymphonyController():
        creates a Heka or simulation controller using the .NET framework
        sets up input and output streams for the device
    
    showMainWindow():
        creates a default protocol plugin
        builds and displays the UI
    
    startAcquisition():
        makes sure user has set protocol parameters
        calls runProtocol()
    
    pauseAcquisition():
        sets a flag so that the protocol will pause after the current epoch completes
    
    stopAcquisition():
        sets a flag so that the protocol will stop after the current epoch completes
    
    runProtocol():
        clears any plot figures
        runs each epoch until the protocol plugin says it's done or the "stop" flag has been set:
            creates and sets up a new epoch
            tells the controller to run the epoch
            updates any figures


newEpochGroup.m:
    GUI for entering parameters of an epoch group


editParameters.m:
    Dynamic GUI for editing the parameters of a protocol.


SymphonyProtocol.m:
    Base class that provides default behaviors for protocols.  All protocols must be sub-classes of this class.
    See the Protocols.txt file for details on implementing a new protocol.