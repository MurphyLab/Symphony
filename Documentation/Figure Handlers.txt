Figure Handlers
===============

The Symphony UI provides a number of pre-built classes for displaying different types of figures.  A protocol can 
open one of the figure windows using the openFigure() method from the SymphonyProtocol base class.


Response figure
---------------

This figure plots the response from the most recent epoch.  No arguments are required.

Example:

    obj.openFigure('Response');


Mean Response figure
--------------------

This figure displays the mean response of all epochs run so far.  The epochs are grouped by a set of parameters and 
the mean of each group is plotted.  The grouping parameters can be specified using the 'GroupByParams' argument or 
they will be determined automatically.

Examples:

    obj.openFigure('Mean Response');
    obj.openFigure('Mean Response', 'GroupByParams', {'param1', 'param2'});


Response Statistics figure
--------------------------

This figure plots statistics for each epoch that has been run.  A callback function must be provided that returns a 
structure containing the statistics for the current epoch.  The response() method can be called to get the resonse 
of the most recent epoch.

Example:
    
    functions s = stats(obj)
        % Provide statistics for the current epoch.
        r = obj.response();
        
        s.mean = mean(r);
        s.var = var(r);
    end
    
    function prepareRun(obj)
        % ... call base method, other setup, etc. ...
        
        obj.openFigure('Response Statistics', 'StatsCallback', @stats);
    end


Custom figure
-------------

This figure simply opens an empty axes and calls back to the protocol after each epoch is run to allow updates.

Example:

    functions updateFigure(obj, axesHandle)
        % Update the title with the current epoch number.
        title(axesHandle, ['Epoch ' str2num(obj.epochNum)]);
    end
    
    function prepareRun(obj)
        % ... call base method, other setup, etc. ...
        
        obj.openFigure('Custom', 'Name', 'Custom Plot', ...
                                 'UpdateCallback', @updateFigure);
    end
